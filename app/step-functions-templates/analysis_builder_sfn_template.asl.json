{
  "Comment": "A description of my state machine",
  "StartAt": "Save vars",
  "States": {
    "Save vars": {
      "Type": "Pass",
      "Next": "Trigger Primary QC Pipelines",
      "Assign": {
        "instrumentRunId": "{% $states.input.instrumentRunId %}"
      }
    },
    "Trigger Primary QC Pipelines": {
      "Type": "Parallel",
      "Next": "Split by Sample Type",
      "Branches": [
        {
          "StartAt": "Get BCLConvert InterOp Event",
          "States": {
            "Get BCLConvert InterOp Event": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "eventDetail": "{% $states.result.Payload.eventDetail %}"
              },
              "Arguments": {
                "FunctionName": "${__make_bclconvert_interop_qc_event_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException",
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "New workflow manager is deployed (BCLConvert InterOp QC)"
            },
            "New workflow manager is deployed (BCLConvert InterOp QC)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Generate BCLConvert InterOp QC Draft",
                  "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                }
              ],
              "Default": "Generate BCLConvert InterOp QC Draft (Legacy)"
            },
            "Generate BCLConvert InterOp QC Draft": {
              "Type": "Task",
              "Resource": "arn:aws:states:::events:putEvents",
              "Arguments": {
                "Entries": "{% [\n  $states.input.eventDetail ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
              },
              "End": true
            },
            "Generate BCLConvert InterOp QC Draft (Legacy)": {
              "Type": "Task",
              "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
              "Arguments": {
                "Entries": "{% [\n  $states.input.eventDetail ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Primary QC Placeholder",
          "States": {
            "Primary QC Placeholder": {
              "Type": "Pass",
              "End": true,
              "Output": {}
            }
          }
        }
      ],
      "Output": {}
    },
    "Split by Sample Type": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get wgs subjects list on sequencing run",
          "States": {
            "Get wgs subjects list on sequencing run": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_subjects_from_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "sampleTypeList": "{% ['${__wgs_sample_type__}'] %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException",
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each subject id (batched) (WGS)",
              "Output": {
                "subjectIdList": "{% $states.result.Payload.subjectIdList %}"
              }
            },
            "For each subject id (batched) (WGS)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Save vars (batched) (WGS)",
                "States": {
                  "Save vars (batched) (WGS)": {
                    "Type": "Pass",
                    "Next": "For each subject id (WGS)",
                    "Assign": {
                      "instrumentRunIdMapIter": "{% $states.input.BatchInput.instrumentRunId %}",
                      "subjectIdListMapIter": "{% $states.input.Items %}"
                    }
                  },
                  "For each subject id (WGS)": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Get WGS libraries from subject id and instrument run id",
                      "States": {
                        "Get WGS libraries from subject id and instrument run id": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Arguments": {
                            "FunctionName": "${__get_libraries_from_instrument_run_id_and_subject_id_lambda_function_arn__}",
                            "Payload": {
                              "instrumentRunId": "{% $states.input.instrumentRunId %}",
                              "subjectId": "{% $states.input.subjectId %}",
                              "sampleTypeList": "{% ['${__wgs_sample_type__}'] %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException",
                                "States.TaskFailed"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Make WGS Analysis Events list",
                          "Output": {
                            "libraryIdList": "{% $states.result.Payload.libraryIdList %}"
                          }
                        },
                        "Make WGS Analysis Events list": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Arguments": {
                            "FunctionName": "${__make_wgs_analysis_events_list_lambda_function_arn__}",
                            "Payload": {
                              "libraryIdList": "{% $states.input.libraryIdList %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "For each Draft event (WGS)",
                          "Output": {
                            "eventDetailList": "{% $states.result.Payload.eventDetailList %}"
                          }
                        },
                        "For each Draft event (WGS)": {
                          "Type": "Map",
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "INLINE"
                            },
                            "StartAt": "New workflow manager deployed (WGS)",
                            "States": {
                              "New workflow manager deployed (WGS)": {
                                "Type": "Choice",
                                "Choices": [
                                  {
                                    "Next": "Generate WGS Drafts",
                                    "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                                  }
                                ],
                                "Default": "Generate WGS Drafts (Legacy)"
                              },
                              "Generate WGS Drafts": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
                                },
                                "End": true
                              },
                              "Generate WGS Drafts (Legacy)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
                                },
                                "End": true
                              }
                            }
                          },
                          "End": true,
                          "Items": "{% $states.input.eventDetailList %}"
                        }
                      }
                    },
                    "End": true,
                    "Items": "{% $subjectIdListMapIter %}",
                    "ItemSelector": {
                      "subjectId": "{% $states.context.Map.Item.Value %}",
                      "instrumentRunId": "{% $instrumentRunIdMapIter %}"
                    },
                    "MaxConcurrency": 1,
                    "Output": {}
                  }
                }
              },
              "End": true,
              "Label": "ForeachsubjectidbatchedWGS",
              "MaxConcurrency": 1,
              "Items": "{% $states.input.subjectIdList %}",
              "ItemBatcher": {
                "MaxItemsPerBatch": 10,
                "BatchInput": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              },
              "Output": {}
            }
          }
        },
        {
          "StartAt": "Get WTS Subjects list on sequencing run",
          "States": {
            "Get WTS Subjects list on sequencing run": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_subjects_from_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "sampleTypeList": "{% ['${__wts_sample_type__}'] %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException",
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each subject id (batched) (WTS)",
              "Output": {
                "subjectIdList": "{% $states.result.Payload.subjectIdList %}"
              }
            },
            "For each subject id (batched) (WTS)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Save vars (batched) (WTS)",
                "States": {
                  "Save vars (batched) (WTS)": {
                    "Type": "Pass",
                    "Next": "For each subject id (WTS)",
                    "Assign": {
                      "instrumentRunIdMapIter": "{% $states.input.BatchInput.instrumentRunId %}",
                      "subjectIdListMapIter": "{% $states.input.Items %}"
                    }
                  },
                  "For each subject id (WTS)": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Get WTS libraries from subject id and instrument run id",
                      "States": {
                        "Get WTS libraries from subject id and instrument run id": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "libraryIdList": "{% $states.result.Payload.libraryIdList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__get_libraries_from_instrument_run_id_and_subject_id_lambda_function_arn__}",
                            "Payload": {
                              "instrumentRunId": "{% $states.input.instrumentRunId %}",
                              "subjectId": "{% $states.input.subjectId %}",
                              "sampleTypeList": "{% ['${__wts_sample_type__}'] %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException",
                                "States.TaskFailed"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Make WTS Analysis Events List"
                        },
                        "Make WTS Analysis Events List": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "eventDetailList": "{% $states.result.Payload.eventDetailList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__make_wts_analysis_events_list_lambda_function_arn__}",
                            "Payload": {
                              "libraryIdList": "{% $states.input.libraryIdList %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "For each Draft Event (WTS)"
                        },
                        "For each Draft Event (WTS)": {
                          "Type": "Map",
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "INLINE"
                            },
                            "StartAt": "New workflow manager deployed (WTS)",
                            "States": {
                              "New workflow manager deployed (WTS)": {
                                "Type": "Choice",
                                "Choices": [
                                  {
                                    "Next": "Generate WTS Drafts",
                                    "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                                  }
                                ],
                                "Default": "Generate WTS Drafts (Legacy)"
                              },
                              "Generate WTS Drafts": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
                                },
                                "End": true
                              },
                              "Generate WTS Drafts (Legacy)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
                                },
                                "End": true
                              }
                            }
                          },
                          "End": true,
                          "Items": "{% $states.input.eventDetailList %}"
                        }
                      }
                    },
                    "End": true,
                    "Items": "{% $subjectIdListMapIter %}",
                    "ItemSelector": {
                      "subjectId": "{% $states.context.Map.Item.Value %}",
                      "instrumentRunId": "{% $instrumentRunIdMapIter %}"
                    },
                    "Output": {}
                  }
                }
              },
              "End": true,
              "Label": "ForeachsubjectidbatchedWTS",
              "MaxConcurrency": 1,
              "Items": "{% $states.input.subjectIdList %}",
              "ItemBatcher": {
                "BatchInput": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                },
                "MaxItemsPerBatch": 10
              },
              "Output": {}
            }
          }
        },
        {
          "StartAt": "Get TSO Subjects List on Sequencing Run",
          "States": {
            "Get TSO Subjects List on Sequencing Run": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "subjectIdList": "{% $states.result.Payload.subjectIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_subjects_from_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "sampleTypeList": "{% ['${__ctdna_sample_type__}'] %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException",
                    "States.TaskFailed"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each subject id (batched) (ctDNA)"
            },
            "For each subject id (batched) (ctDNA)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Save vars (batched) (ctDNA)",
                "States": {
                  "Save vars (batched) (ctDNA)": {
                    "Type": "Pass",
                    "Next": "For each subject id (ctDNA)",
                    "Assign": {
                      "instrumentRunIdMapIter": "{% $states.input.BatchInput.instrumentRunId %}",
                      "subjectIdListMapIter": "{% $states.input.Items %}"
                    }
                  },
                  "For each subject id (ctDNA)": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Get ctDNA libraries from subject id and instrument run id",
                      "States": {
                        "Get ctDNA libraries from subject id and instrument run id": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "libraryIdList": "{% $states.result.Payload.libraryIdList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__get_libraries_from_instrument_run_id_and_subject_id_lambda_function_arn__}",
                            "Payload": {
                              "instrumentRunId": "{% $states.input.instrumentRunId %}",
                              "subjectId": "{% $states.input.subjectId %}",
                              "sampleTypeList": "{% ['${__ctdna_sample_type__}'] %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException",
                                "States.TaskFailed"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Make ctDNA Analysis Events List"
                        },
                        "Make ctDNA Analysis Events List": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "eventDetailList": "{% $states.result.Payload.eventDetailList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__make_ctdna_analysis_events_list_lambda_function_arn__}",
                            "Payload": {
                              "libraryIdList": "{% $states.input.libraryIdList %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "For each Draft Event (ctDNA)"
                        },
                        "For each Draft Event (ctDNA)": {
                          "Type": "Map",
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "INLINE"
                            },
                            "StartAt": "New workflow manager deployed (ctDNA)",
                            "States": {
                              "New workflow manager deployed (ctDNA)": {
                                "Type": "Choice",
                                "Choices": [
                                  {
                                    "Next": "Generate ctDNA Draft Events",
                                    "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                                  }
                                ],
                                "Default": "Generate ctDNA Draft Events (legacy)"
                              },
                              "Generate ctDNA Draft Events": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
                                },
                                "End": true
                              },
                              "Generate ctDNA Draft Events (legacy)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
                                },
                                "End": true
                              }
                            }
                          },
                          "End": true,
                          "Items": "{% $states.input.eventDetailList %}"
                        }
                      }
                    },
                    "End": true,
                    "Items": "{% $subjectIdListMapIter %}",
                    "ItemSelector": {
                      "subjectId": "{% $states.context.Map.Item.Value %}",
                      "instrumentRunId": "{% $instrumentRunIdMapIter %}"
                    },
                    "Output": {}
                  }
                }
              },
              "End": true,
              "Label": "ForeachsubjectidbatchedctDNA",
              "MaxConcurrency": 1,
              "Items": "{% $states.input.subjectIdList %}",
              "ItemBatcher": {
                "BatchInput": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                },
                "MaxItemsPerBatch": 10
              },
              "Output": {}
            }
          }
        }
      ],
      "Next": "Secondary level drafts (Split by sample type)"
    },
    "Secondary level drafts (Split by sample type)": {
      "Type": "Parallel",
      "End": true,
      "Branches": [
        {
          "StartAt": "Get WGTS Subjects List on Sequencing Run",
          "States": {
            "Get WGTS Subjects List on Sequencing Run": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "subjectIdList": "{% $states.result.Payload.subjectIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_subjects_from_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "sampleTypeList": "{% ['${__wgs_sample_type__}', '${__wts_sample_type__}'] %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each subject id (batched) (WGTS)"
            },
            "For each subject id (batched) (WGTS)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Set vars (batched) (WGTS)",
                "States": {
                  "Set vars (batched) (WGTS)": {
                    "Type": "Pass",
                    "Next": "For each subject ID (WGTS) (Post)",
                    "Assign": {
                      "instrumentRunIdMapIter": "{% $states.input.BatchInput.instrumentRunId %}",
                      "subjectIdListMapIter": "{% $states.input.Items %}"
                    }
                  },
                  "For each subject ID (WGTS) (Post)": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Get WGTS libraries from subject id and instrument run id",
                      "States": {
                        "Get WGTS libraries from subject id and instrument run id": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "libraryIdList": "{% $states.result.Payload.libraryIdList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__get_libraries_from_instrument_run_id_and_subject_id_lambda_function_arn__}",
                            "Payload": {
                              "instrumentRunId": "{% $states.input.instrumentRunId %}",
                              "subjectId": "{% $states.input.subjectId %}",
                              "sampleTypeList": "{% ['${__wgs_sample_type__}', '${__wts_sample_type__}'] %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException",
                                "States.TaskFailed"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Make WGTS Analysis Events List"
                        },
                        "Make WGTS Analysis Events List": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "eventDetailList": "{% $states.result.Payload.eventDetailList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__make_wgts_post_analysis_events_list_lambda_function_arn__}",
                            "Payload": {
                              "libraryIdList": "{% $states.input.libraryIdList %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "For each Draft Event (WGTS) (post)"
                        },
                        "For each Draft Event (WGTS) (post)": {
                          "Type": "Map",
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "INLINE"
                            },
                            "StartAt": "New workflow manager deployed (WGTS) (post)",
                            "States": {
                              "New workflow manager deployed (WGTS) (post)": {
                                "Type": "Choice",
                                "Choices": [
                                  {
                                    "Next": "Generate WGTS Draft Event",
                                    "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                                  }
                                ],
                                "Default": "Generate WGTS Draft Event (Legacy)"
                              },
                              "Generate WGTS Draft Event": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
                                },
                                "End": true
                              },
                              "Generate WGTS Draft Event (Legacy)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
                                },
                                "End": true
                              }
                            }
                          },
                          "End": true,
                          "Items": "{% $states.input.eventDetailList %}"
                        }
                      }
                    },
                    "End": true,
                    "MaxConcurrency": 1,
                    "Items": "{% $subjectIdListMapIter %}",
                    "ItemSelector": {
                      "subjectId": "{% $states.context.Map.Item.Value %}",
                      "instrumentRunId": "{% $instrumentRunIdMapIter %}"
                    },
                    "Output": {}
                  }
                }
              },
              "End": true,
              "Label": "ForeachsubjectidbatchedWGTS",
              "ItemBatcher": {
                "BatchInput": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                },
                "MaxItemsPerBatch": 10
              },
              "MaxConcurrency": 1,
              "Items": "{% $states.input.subjectIdList %}",
              "Output": {}
            }
          }
        },
        {
          "StartAt": "Get TSO Subjects List on Sequencing Run (post)",
          "States": {
            "Get TSO Subjects List on Sequencing Run (post)": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "subjectIdList": "{% $states.result.Payload.subjectIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_subjects_from_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $instrumentRunId %}",
                  "sampleTypeList": "{% ['${__ctdna_sample_type__}'] %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each subject id (batched) (ctDNA) (post)"
            },
            "For each subject id (batched) (ctDNA) (post)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Save vars (batched) (ctDNA) (post)",
                "States": {
                  "Save vars (batched) (ctDNA) (post)": {
                    "Type": "Pass",
                    "Next": "For each subject ID (ctDNA) (post)",
                    "Assign": {
                      "instrumentRunIdMapIter": "{% $states.input.BatchInput.instrumentRunId %}",
                      "subjectIdListMapIter": "{% $states.input.Items %}"
                    }
                  },
                  "For each subject ID (ctDNA) (post)": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Get ctDNA libraries from subject id and instrument run id (post)",
                      "States": {
                        "Get ctDNA libraries from subject id and instrument run id (post)": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": "{% $states.result.Payload %}",
                          "Arguments": {
                            "FunctionName": "${__get_libraries_from_instrument_run_id_and_subject_id_lambda_function_arn__}",
                            "Payload": {
                              "instrumentRunId": "{% $states.input.instrumentRunId %}",
                              "subjectId": "{% $states.input.subjectId %}",
                              "sampleTypeList": "{% ['${__ctdna_sample_type__}'] %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Make TSO500 ctDNA Analysis Events List (post)"
                        },
                        "Make TSO500 ctDNA Analysis Events List (post)": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Output": {
                            "eventDetailList": "{% $states.result.Payload.eventDetailList %}"
                          },
                          "Arguments": {
                            "FunctionName": "${__make_ctdna_post_analysis_events_list_lambda_function_arn__}",
                            "Payload": {
                              "libraryIdList": "{% $states.input.libraryIdList %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "For each Draft Event (ctDNA) (post)"
                        },
                        "For each Draft Event (ctDNA) (post)": {
                          "Type": "Map",
                          "ItemProcessor": {
                            "ProcessorConfig": {
                              "Mode": "INLINE"
                            },
                            "StartAt": "New workflow manager deployed (ctDNA) (post)",
                            "States": {
                              "New workflow manager deployed (ctDNA) (post)": {
                                "Type": "Choice",
                                "Choices": [
                                  {
                                    "Next": "Generate ctDNA Draft Event (post)",
                                    "Condition": "{% ${__new_workflow_manager_is_deployed__} %}"
                                  }
                                ],
                                "Default": "Generate ctDNA Draft Event (legacy) (post)"
                              },
                              "Generate ctDNA Draft Event (post)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_update_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": $v\n    }\n  })\n] %}"
                                },
                                "End": true
                              },
                              "Generate ctDNA Draft Event (legacy) (post)": {
                                "Type": "Task",
                                "Resource": "arn:aws:states:::events:putEvents",
                                "Arguments": {
                                  "Entries": "{% [\n  $states.input ~> $map(function($v){\n    {\n      \"EventBusName\": \"${__event_bus_name__}\",\n      \"DetailType\": \"${__workflow_run_state_change_detail_type__}\",\n      \"Source\": \"${__stack_source__}\",\n      \"Detail\": (\n        $v ~> \n        /* Renamed libraries to linkedLibraries using the transform method */\n        | $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n        /* Renamed workflowName and workflowVersion using the transform method */\n        | $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | ~>\n        /* Add timestamp */\n        | $ | {\"timestamp\": $now()} |\n      )\n    }\n  })\n] %}"
                                },
                                "End": true
                              }
                            }
                          },
                          "End": true,
                          "Items": "{% $states.input.eventDetailList %}"
                        }
                      }
                    },
                    "End": true,
                    "Items": "{% $subjectIdListMapIter %}",
                    "ItemSelector": {
                      "subjectId": "{% $states.context.Map.Item.Value %}",
                      "instrumentRunId": "{% $instrumentRunIdMapIter %}"
                    },
                    "Output": {}
                  }
                }
              },
              "End": true,
              "Label": "ForeachsubjectidbatchedctDNApost",
              "MaxConcurrency": 1,
              "ItemBatcher": {
                "BatchInput": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                },
                "MaxItemsPerBatch": 10
              },
              "Items": "{% $states.input.subjectIdList %}",
              "Output": {}
            }
          }
        }
      ]
    }
  },
  "QueryLanguage": "JSONata"
}
